pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'scientific-calculator'  // Local image name
        DOCKER_TAG = 'akshat2911/scientific-calculator:latest'  // Full Docker Hub tag
        GITHUB_REPO_URL = 'https://github.com/Akshat2920/ScientificCalcMiniProject'
        DOCKER_CREDENTIALS_ID = 'DockerHubCred'  // Ensure this matches Jenkins credentials ID
    }

    stages {
        stage('Checkout Code') {
            steps {
                git "${GITHUB_REPO_URL}"
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip install -r requirements.txt || true'
            }
        }

        stage('Build Python Code') {
            steps {
                sh 'python3 -m py_compile ScientificCalculator.py'
            }
        }

        stage('Run Python Tests') {
            steps {
                sh 'python3 -m unittest discover -s . -p "Test*.py"'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "/usr/local/bin/docker build -t ${DOCKER_IMAGE_NAME} ."
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | /usr/local/bin/docker login -u "$DOCKER_USERNAME" --password-stdin
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {    
                sh "/usr/local/bin/docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_TAG}"
                sh "/usr/local/bin/docker push ${DOCKER_TAG}"  
            }
        }

        stage('Cleanup Docker Images') {
            steps {
                sh "/usr/local/bin/docker rmi ${DOCKER_IMAGE_NAME} || true"
                sh "/usr/local/bin/docker rmi ${DOCKER_TAG} || true"
                sh "/usr/local/bin/docker system prune -f || true"
            }
        }

        stage('Deploy using Ansible') {
            steps {
                withCredentials([string(credentialsId: 'SUDO_PASSWORD', variable: 'SUDO_PASS')]) {
                    sh '''
                        /Users/akshatlal/Library/Python/3.9/bin/ansible-playbook -i inventory deploy.yml --extra-vars "ansible_become_pass=$SUDO_PASS"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Build, Tests, and Docker Push Successful!"
        }
        failure {
            echo "Build or Tests Failed! Check logs for details."
        }
    }
}
